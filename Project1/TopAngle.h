#pragma once
#include "Vector.h" // Vector3D 構造体を使うため
#include <vector>   // std::vector を使うため (Draw 関数の引数)

/*
 * TopAngle.h
 * 役割:
 *   このヘッダーファイルは、画面の左上に表示する「トップダウンビュー」
 *   （ワールドを真上から見下ろしたような2Dマップ）を描画するための `TopAngle` クラスを定義します。
 *   このビューは、メインとなる3D視点のカメラ (`Camera` クラスのオブジェクト) が
 *   ワールド内のどの位置にいて、どの方向を向いているかを視覚的に確認したり、
 *   ワールド全体のオブジェクト配置を把握したりするのに役立ちます。
 *
 * 主な機能:
 *   - 監視対象の `Camera` オブジェクトへのポインタを保持します。
 *   - ワールド空間の座標 (X, Z) を、画面左上のビュー領域内の2Dスクリーン座標に変換します。
 *   - `Draw` メソッドで、ビュー領域の背景、カメラの位置・向き・視野角、
 *     およびワールド内のオブジェクト（線分）をビュー上に描画します。
 *
 * 元のコードからの変更点・コメント (推定):
 *   - この `TopAngle` クラスは、元の初期コードにはなく、開発の過程で
 *     デバッグや状況把握のために追加された機能であると考えられます。
 *   - `Camera` クラスへの依存があるため、`#include "Camera.h"` を直接記述する代わりに
 *     前方宣言 (`class Camera;`) を使用しています。これは、ヘッダーファイル同士が
 *     互いをインクルードし合うことによる問題を避けるための一般的なテクニックです。
 *   - トップダウンビューの表示位置、サイズ、縮尺などの設定値が定数として宣言されています。
 *     これらの具体的な値は `TopAngle.cpp` ファイル内で定義されます。
 *   - ワールド座標からビュー座標へ変換するための補助関数 `ConvertWorldToView` が
 *     プライベートメンバとして宣言されています。
 *
 * 使い方:
 *   - `#include "TopAngle.h"` をインクルードします。
 *   - `TopAngle` オブジェクトを作成する際に、監視したい `Camera` オブジェクトへのポインタを渡します
 *     (例: `TopAngle* topView = new TopAngle(mainCameraPtr);`)。
 *   - メインループの描画処理の中で `topView->Draw(worldLines)` を呼び出すと、
 *     画面左上にトップダウンビューが描画されます。
 */

 // 前方宣言 (Forward Declaration)
 // `Camera` クラスの完全な定義をここで読み込む必要はなく、
 // `Camera` という名前のクラスが存在することだけをコンパイラに伝えます。
 // これにより、コンパイル時間の短縮やヘッダー間の依存関係の整理に役立ちます。
class Camera;

class TopAngle
{
public: // クラスの外部からアクセス可能なメンバ
    // コンストラクタ: 監視対象となる `Camera` オブジェクトへのポインタ `cam` を受け取ります。
    TopAngle(Camera* cam);
    // デストラクタ: `TopAngle` オブジェクトが不要になったときに呼び出されます。
    ~TopAngle();

    // 描画関数:
    //   メインループから毎フレーム呼び出され、トップダウンビューを描画します。
    //   `worldLines` は、ワールド空間に存在するオブジェクトの線分データです。
    void Draw(const std::vector<std::vector<Vector3D>>& worldLines);

private: // クラスの内部でのみアクセス可能なメンバ
    // 監視対象のメインカメラオブジェクトへのポインタ。
    // このポインタを通じて、Draw関数内でカメラの位置や向きを取得します。
    Camera* camera;

    // --- トップダウンビューの表示設定 (静的定数メンバー) ---
    //     これらの定数の実際の値は TopAngle.cpp で定義されます。
    //     (注: C++17以降ではインライン変数としてヘッダー内で定義することも可能です)
    static const int VIEW_POS_X;     // ビュー表示領域の左上のX座標 (スクリーン座標)
    static const int VIEW_POS_Y;     // ビュー表示領域の左上のY座標 (スクリーン座標)
    static const int VIEW_WIDTH;     // ビュー表示領域の幅 (ピクセル単位)
    static const int VIEW_HEIGHT;    // ビュー表示領域の高さ (ピクセル単位)
    static const float VIEW_SCALE;   // ワールド空間の座標をビュー表示領域の座標に変換する際の拡大率・縮尺
    static const float CAMERA_FOV_H; // メインカメラの水平視野角 (ラジアン単位)。ビュー上に視野範囲を描画するために使用。
    static const float VIEW_RANGE;   // ビュー上でカメラの向きや視野角を示す線の長さ (ピクセル単位)。

    // ヘルパー関数 (クラス内部で使う補助的な関数):
    //   ワールド空間の座標 (X, Z) を、画面左上のトップダウンビュー表示領域内の
    //   2Dスクリーン座標 (X, Y) に変換します。
    Vector3D ConvertWorldToView(float worldX, float worldZ) const;
};